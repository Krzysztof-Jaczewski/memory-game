{"version":3,"sources":["lights.png","stars.jpg","GlobalStyle.js","components/Board/styled.js","components/SingleCard/images/snowman.png","components/SingleCard/images/candy.png","components/SingleCard/images/cookie.png","components/SingleCard/images/gift.png","components/SingleCard/images/santa.png","components/SingleCard/images/sock.png","components/SingleCard/images/cardBack.jpg","components/gameSlice.js","components/SingleCard/styled.js","components/SingleCard/index.js","components/Board/index.js","components/Button/styled.js","components/Button/index.js","components/Title/styled.js","components/Title/index.js","App.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","lights","stars","MainContent","styled","main","StyledBoard","section","gameSlice","createSlice","name","initialState","cards","turns","choiceOne","choiceTwo","cardBack","src","cardImages","snowman","candy","coockie","gift","santa","sock","reducers","shuffleCards","state","shuffledCards","concat","sort","Math","random","map","card","matched","id","nanoid","handleChoice","payload","resetChoice","updateCards","actions","selectCardsState","selectCards","selectTurns","selectCardBack","selectChoiceOne","selectChoiceTwo","StyledCard","div","CardBack","img","flipped","css","CardFront","SingleCard","useSelector","dispatch","useDispatch","useEffect","console","log","setTimeout","alt","onClick","handleClick","Board","StyledButton","button","Button","StyledTitle","h1","Header","header","Title","App","store","configureStore","reducer","cardsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15c0d4c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lights.a9d822ef.png\";","export default __webpack_public_path__ + \"static/media/stars.71437e66.jpg\";","import { createGlobalStyle } from \"styled-components\";\r\nimport lights from \"./lights.png\";\r\nimport stars from \"./stars.jpg\";\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nbody {\r\n  font-family: 'Lato', sans-serif;\r\n  background-image: url(${lights}), url(${stars});\r\n  background-repeat: no-repeat;\r\n  background-size: 100% contain;\r\n}\r\n\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MainContent = styled.main`\r\n  max-width: 540px;\r\n  min-height: 100px;\r\n  margin: 40px auto;\r\n`;\r\n\r\nexport const StyledBoard = styled.section`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  gap: 20px;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/snowman.900c36da.png\";","export default __webpack_public_path__ + \"static/media/candy.4dfc5341.png\";","export default __webpack_public_path__ + \"static/media/cookie.4d8e8970.png\";","export default __webpack_public_path__ + \"static/media/gift.33c31d23.png\";","export default __webpack_public_path__ + \"static/media/santa.d080bc57.png\";","export default __webpack_public_path__ + \"static/media/sock.c3b8f7b1.png\";","export default __webpack_public_path__ + \"static/media/cardBack.7852abab.jpg\";","import { createSlice, nanoid } from \"@reduxjs/toolkit\";\r\nimport snowman from \"./SingleCard/images/snowman.png\";\r\nimport candy from \"./SingleCard/images/candy.png\";\r\nimport coockie from \"./SingleCard/images/cookie.png\";\r\nimport gift from \"./SingleCard/images/gift.png\";\r\nimport santa from \"./SingleCard/images/santa.png\";\r\nimport sock from \"./SingleCard/images/sock.png\";\r\nimport cardBack from \"./SingleCard/images/cardBack.jpg\";\r\n\r\nconst gameSlice = createSlice({\r\n  name: \"cards\",\r\n  initialState: {\r\n    cards: [],\r\n    turns: 0,\r\n    choiceOne: null,\r\n    choiceTwo: null,\r\n    cardBack: { src: cardBack },\r\n    cardImages: [\r\n      { src: snowman },\r\n      { src: candy },\r\n      { src: coockie },\r\n      { src: gift },\r\n      { src: santa },\r\n      { src: sock },\r\n    ],\r\n  },\r\n  reducers: {\r\n    shuffleCards: (state) => {\r\n      const shuffledCards = state.cardImages\r\n        .concat(state.cardImages)\r\n        .sort(() => Math.random() - 0.5)\r\n        .map((card) => ({\r\n          src: card.src,\r\n          matched: false,\r\n          id: nanoid(),\r\n        }));\r\n\r\n      state.cards = shuffledCards;\r\n    },\r\n    handleChoice: (state, { payload: card }) => {\r\n      state.choiceOne\r\n        ? (state.choiceTwo = card)\r\n        : (state.choiceOne = card);\r\n    },\r\n    resetChoice: (state) => {\r\n      state.choiceTwo = null;\r\n      state.choiceOne = null;\r\n      state.turns += 1;\r\n    },\r\n    updateCards: (state, { payload: src }) => {\r\n      state.cards.map((card) => {\r\n        if (card.src === src) return (card.matched = true);\r\n        else return card;\r\n      });\r\n    },\r\n  },\r\n});\r\nexport const {\r\n  shuffleCards,\r\n  handleChoice,\r\n  resetChoice,\r\n  updateCards,\r\n} = gameSlice.actions;\r\n\r\nexport const selectCardsState = (state) => state.cards;\r\nexport const selectCards = (state) => selectCardsState(state).cards;\r\nexport const selectTurns = (state) => selectCardsState(state).turns;\r\nexport const selectCardBack = (state) =>\r\n  selectCardsState(state).cardBack;\r\n\r\nexport const selectChoiceOne = (state) =>\r\n  selectCardsState(state).choiceOne;\r\nexport const selectChoiceTwo = (state) =>\r\n  selectCardsState(state).choiceTwo;\r\n\r\nexport default gameSlice.reducer;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledCard = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const CardBack = styled.img`\r\n  width: 100%;\r\n  display: block;\r\n  border: 2px solid white;\r\n  border-radius: 6px;\r\n  background-image: linear-gradient(green, black);\r\n  cursor: pointer;\r\n  transition: all ease-in 0.3s;\r\n  transition-delay: 0.3s;\r\n\r\n  ${({ flipped }) =>\r\n    flipped &&\r\n    css`\r\n      transform: rotateY(90deg);\r\n      transition-delay: 0s;\r\n    `}\r\n`;\r\n\r\nexport const CardFront = styled(CardBack)`\r\n  transform: rotateY(90deg);\r\n  position: absolute;\r\n  transition: all ease-in 0.3s;\r\n  cursor: not-allowed;\r\n\r\n  ${({ flipped }) =>\r\n    flipped &&\r\n    css`\r\n      transform: rotateY(0deg);\r\n      transition-delay: 0.3s;\r\n    `}\r\n`;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  handleChoice,\r\n  resetChoice,\r\n  selectCardBack,\r\n  selectChoiceOne,\r\n  selectChoiceTwo,\r\n  updateCards,\r\n} from \"../gameSlice\";\r\nimport { CardFront, CardBack, StyledCard } from \"./styled\";\r\n\r\nexport const SingleCard = ({ card }) => {\r\n  const cardBack = useSelector(selectCardBack);\r\n  const choiceOne = useSelector(selectChoiceOne);\r\n  const choiceTwo = useSelector(selectChoiceTwo);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = (card) => {\r\n    dispatch(handleChoice(card));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      if (choiceOne.src === choiceTwo.src) {\r\n        dispatch(updateCards(choiceOne.src));\r\n        dispatch(updateCards(choiceTwo.src));\r\n        dispatch(resetChoice());\r\n        console.log(\"brawo\");\r\n      } else {\r\n        console.log(\"źle\");\r\n        setTimeout(() => {\r\n          dispatch(resetChoice());\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [dispatch, choiceOne, choiceTwo]);\r\n\r\n  return (\r\n    <StyledCard>\r\n      <CardFront\r\n        flipped={\r\n          card === choiceOne || card === choiceTwo || card.matched\r\n        }\r\n        src={card.src}\r\n        alt=\"card front\"\r\n      />\r\n      <CardBack\r\n        flipped={\r\n          card === choiceOne || card === choiceTwo || card.matched\r\n        }\r\n        src={cardBack.src}\r\n        alt=\"card back\"\r\n        onClick={() => handleClick(card)}\r\n      />\r\n    </StyledCard>\r\n  );\r\n};\r\n","import { MainContent, StyledBoard } from \"./styled\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCards, selectTurns } from \"../gameSlice\";\r\nimport { SingleCard } from \"../SingleCard\";\r\n\r\nexport const Board = () => {\r\n  const cards = useSelector(selectCards);\r\n  const turns = useSelector(selectTurns);\r\n\r\n  console.log(cards, turns);\r\n  return (\r\n    <MainContent>\r\n      <StyledBoard>\r\n        {cards.map((card) => (\r\n          <SingleCard key={card.id} card={card} />\r\n        ))}\r\n      </StyledBoard>\r\n    </MainContent>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n  color: red;\r\n  margin: 0 auto;\r\n`;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { shuffleCards } from \"../gameSlice\";\r\nimport { StyledButton } from \"./styled\";\r\n\r\nexport const Button = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledButton onClick={() => dispatch(shuffleCards())}>\r\n      New Game\r\n    </StyledButton>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTitle = styled.h1`\r\n  color: lightgreen;\r\n  font-size: 4vw;\r\n  margin: 0;\r\n  white-space: nowrap;\r\n  padding: 0 8px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  font-size: 4vw;\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  justify-content: center;\r\n  margin-top: 128px;\r\n`;\r\n","import { StyledTitle, Header } from \"./styled\";\r\n\r\nexport const Title = () => (\r\n  <Header>\r\n    🎄 <StyledTitle> Christmas Memory Game </StyledTitle> 🎄\r\n  </Header>\r\n);\r\n","import { Board } from \"./components/Board\";\nimport { Button } from \"./components/Button\";\nimport { Title } from \"./components/Title\";\n\nexport const App = () => {\n  return (\n    <>\n      <Title />\n      <Board />\n      <Button />\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport cardsReducer from \"./components/gameSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    cards: cardsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./GlobalStyle.js\";\nimport App from \"./App\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}